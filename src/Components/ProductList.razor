@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<div class="row search-panel">
    <div class="col-lg-6"></div>
    <div class="col-lg-6">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search for..." @bind="searchKey" @onkeypress="onKeyPress">
            <span class="input-group-btn">
                <button class="btn btn-default seach-clear" type="button" @onclick="(e => ResetSearchProducts())">X</button>
                <button class="btn btn-default search-action" type="button" @onclick="(e => SearchProducts())">Search</button>
            </span>
        </div>
    </div>
</div>

@if (productLists == null)
{
    <div class="card-columns">
        @foreach (var product in ProductService.GetAllData())
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Image');">
                </div>
                <div class="overlay">
                    <h5 class="card-title text">@product.Title</h5>
                    <small class="btn-text">
                        <button @onclick="(e => SelectProduct(product.Id))"
                        data-toggle="modal" data-target="#productModal" class="btn btn-primary @product.Id">
                            More Info
                        </button>
                    </small>
                </div>
            </div>
        }
    </div>
}

@if (productLists != null)
{
    <div class="card-columns">
        @foreach (var product in productLists)
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Image');">
                </div>
                <div class="overlay">
                    <h5 class="card-title text">@product.Title</h5>
                    <small class="btn-text">
                        <button @onclick="(e => SelectProduct(product.Id))"
                        data-toggle="modal" data-target="#productModal" class="btn btn-primary @product.Id">
                            More Info
                        </button>
                    </small>
                </div>
            </div>
        }
    </div>
}

<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            @if (selectedProduct != null)
            {
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
                        </div>
                    </div>
                </div>
                @* The vote count for developer cards on the index page *@
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    @if (voteCount != 0)
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        if (i > currentRating)
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            }
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@* Get the current rating of products and send it to the backend to update *@
@code
{
    ProductModel selectedProduct;
    string selectedProductId;
    IEnumerable<ProductModel> productLists;
    string searchKey;

    async Task onKeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await Task.Delay(500);
            productLists = ProductService.GetFilterData(searchKey);
        }
    }

    void SearchProducts()
    {
        productLists = ProductService.GetFilterData(searchKey);
    }

    void ResetSearchProducts()
    {
        searchKey = "";
        productLists = ProductService.GetFilterData(searchKey);
    }

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        if (selectedProduct.Ratings != null)
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }
}